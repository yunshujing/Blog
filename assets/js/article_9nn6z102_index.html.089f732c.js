"use strict";(self.webpackChunkyskye=self.webpackChunkyskye||[]).push([[12],{4435:(s,a,e)=>{e.r(a),e.d(a,{comp:()=>x,data:()=>q});var n=e(641);const i=e.p+"assets/img/e2cc8dea3596ffcc0b4823b2707a4384.283d11dc.png",l=e.p+"assets/img/090eeb844b79a613e6f50a9120243d2f.c5486f0a.png",t=e.p+"assets/img/d445e9bc0562f7460a6aea21a04835a1.a24869ef.png",p=e.p+"assets/img/2aec366a790d7d2275a8b5999cf354b9.c063d13e.png",c=e.p+"assets/img/03c71dd698cce3f46515c2ca33020581.bdb3c8de.png",d=e.p+"assets/img/2a21c1f36d2643984d5fe231ed2181b0.01b5f195.png",r=e.p+"assets/img/8d0528233d5dbaea006a9599c63ad131.1edff9c0.png",o=e.p+"assets/img/d7a9aaa9631510af23559b33c5b1b761.e9946d51.png",g=e.p+"assets/img/0e50ad67a06f23b5e03fdac58cc7881d.4487fd58.png",u=e.p+"assets/img/ceef68c4dddb400c54e36fafa4ff8aa2.14441356.png",m=e.p+"assets/img/aaca39ed97d791691c04432008e6a324.a1ea88d2.png",h=e.p+"assets/img/7e4a164ac557b3215e7e44d40ff20f7b.c87267a1.png",b=e.p+"assets/img/7a02763056977520d297e085cc2e1361.5f09878e.png",f=e.p+"assets/img/7f6d07b891b3f3d517b50c4812f3c8b6.9c7fa694.png",v=e.p+"assets/img/d3c62e0fe23c610d32e2c08ebee8eff7.7bf199fe.png",k={},x=(0,e(6262).A)(k,[["render",function(s,a){return(0,n.uX)(),(0,n.CE)("div",null,a[0]||(a[0]=[(0,n.Fv)('<blockquote><p>文章转载自<a href="https://blog.csdn.net/liKeQing1027520/article/details/137482798" target="_blank" rel="noopener noreferrer">ida在kali-linux虚拟机上进行远程调试（提供可能的解决无法连接的思路）内含本机与linux虚拟机无法互相ping通的解决方法（见标题四.（七））_ida远程调试linux-CSDN博客</a></p></blockquote><blockquote><p>本篇记录本蒟蒻逆向博主在ida进行远程调试踩的坑，一是方便自己以后不再踩，二则便于后人少走弯路 本篇的学习目的是要<strong>借助linux虚拟机提供一个linux环境，实现ida远程调试程序</strong>，因为大多数人想必和博主一样只有windows一个主系统，这种情况下逆向分析过程中如果遇到elf文件，且必须通过动态调试才能解决（或者说借助动调可以大大降低逆向难度），如果不能进行linux远程调试，那将只能<strong>望题兴叹</strong>！</p></blockquote><h2 id="一-自编译c语言文件生成elf程序" tabindex="-1"><a class="header-anchor" href="#一-自编译c语言文件生成elf程序"><span>一，自编译c语言文件生成elf程序</span></a></h2><p>ELF的全称是Executable and Linkable Format，即linux系统下的可执行程序，我们远程调的当然是elf程序，windows下的32和64位程序都没必要<s>脱这个裤子放屁</s>，明明能直接本地动调干嘛还绕一圈虚拟机（bushi）</p><p>而为了确保本篇能够将问题说清楚明白，因此在【<strong>一</strong>】这里先统一自编译出一个简单的elf程序，以便用于测试远程调试</p><h3 id="一-创建c语言文件" tabindex="-1"><a class="header-anchor" href="#一-创建c语言文件"><span>（一）创建c语言文件</span></a></h3><p>在kali-linux虚拟机中创建一个c语言文件（建议创建在桌面上）并编写如下代码</p><p>可以使用touch命令创建文件，vim编辑文件保存，也可以直接右键创建文件，双击进入文件编辑</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#include&lt;stdio.h&gt;</span></span>\n<span class="line"><span>#include&lt;string.h&gt;</span></span>\n<span class="line"><span>int main(){</span></span>\n<span class="line"><span>        char arr[50];</span></span>\n<span class="line"><span>        scanf(&quot;%s&quot;, arr);</span></span>\n<span class="line"><span>        if(!strcmp(arr, &quot;flag{you_get_it!}&quot;)){</span></span>\n<span class="line"><span>                puts(&quot;Good!&quot;);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        else{</span></span>\n<span class="line"><span>                puts(&quot;Bad...&quot;);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        return 0;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+i+'" alt=""></p><h3 id="二-编译c语言文件生成elf程序" tabindex="-1"><a class="header-anchor" href="#二-编译c语言文件生成elf程序"><span>（二）编译c语言文件生成elf程序</span></a></h3><p>使用【<strong>gcc -o 生成程序名 待编译文件名</strong>】命令编译c语言文件，将在同目录下产生elf程序</p><p><img src="'+l+'" alt=""></p><h2 id="二-复制ida的linux-server64程序到kali-linux虚拟机中并启动-建立远程调试桥梁" tabindex="-1"><a class="header-anchor" href="#二-复制ida的linux-server64程序到kali-linux虚拟机中并启动-建立远程调试桥梁"><span>二，复制ida的linux_server64程序到kali-linux虚拟机中并启动，建立远程调试桥梁</span></a></h2><p>在本机的ida安装目录中找到【<strong>dbgsrv</strong>】文件夹，将其中的【<strong>linux_server64</strong>】（当然你的虚拟机如果是32位的&lt;-很少见的情况吧，请使用【<strong>linux_server</strong>】）程序复制到kali-linux虚拟机中（直接拖动复制）</p><p><img src="'+t+'" alt=""></p><p><img src="'+p+'" alt=""></p><p><img src="'+c+'" alt=""></p><p>【<strong>./linux_server64</strong>】命令运行该程序，默认监听端口23946，可以用-p参数修改端口</p><p><img src="'+d+'" alt=""></p><h2 id="三-打开本地ida-连接kali-linux虚拟机-进行远程调试" tabindex="-1"><a class="header-anchor" href="#三-打开本地ida-连接kali-linux虚拟机-进行远程调试"><span>三，打开本地ida，连接kali-linux虚拟机，进行远程调试</span></a></h2><p>建立一个新且空的调试项目，【<strong>Debugger</strong>】-&gt;【<strong>Run</strong>】-&gt;【<strong>Remote Linux debugger</strong>】</p><p><img src="'+r+'" alt=""></p><p>在【<strong>调试选项窗口</strong>】（如果ida没有自动弹出这个窗口，在Debugger里找）中按如下图提示输入对应的内容，如果没有提示则默认不输入</p><p>（注，本博主观察到似乎不同版本的ida在此【<strong>调试选项窗口</strong>】的内容多多少少存在差异从而导致硬搬的小白可能无法连接的原因第一步就栽在这里&lt;-骂的就是蒟蒻博主自己/(ㄒoㄒ)/~~</p><p>所以这一步请仔细观察自己的调试选项窗口填写参数的参数名，主要是Directory这一栏要填的是调试文件的<strong>父</strong>目录即上一级目录，博主的ida要填的只有这两个路径，但博主在查资料时看见其它很多ida要填三个路径，所以根据自己ida的差异填写对应参数就好了，不然会导致后续连接失败的）</p><p><img src="'+o+'" alt=""></p><p>填完调试选项后最后点OK就可以成功连接了</p><p><img src="'+g+'" alt=""></p><p>【F5】反编译后找到main函数，虽然代码有些变化，但很显然就是我们自己写的那个c语言程序</p><p><img src="'+u+'" alt=""></p><h2 id="四-提供可能的解决无法连接的思路" tabindex="-1"><a class="header-anchor" href="#四-提供可能的解决无法连接的思路"><span>四，提供可能的解决无法连接的思路</span></a></h2><p>蒟蒻博主也是花了好几天的时间来学习远程调试，被下面这个框折磨得当时差点放弃逆向/(ㄒoㄒ)/~~</p><p><img src="'+m+'" alt=""></p><p>提供几个可能的连接失败的思路供参考解决</p><blockquote><h3>（一）待调试文件所在目录输入错误</h3><h3>（二）待调试文件的父目录错输成待调试文件目录</h3> 这两个问题上面其实已经提过了 <p><img src="'+o+'" alt=""></p></blockquote><blockquote><h3>（三）虚拟机的ip地址输入错误</h3> 检查【**调试选项窗口**】的Hostname一栏填写的ip是否与虚拟机的ip一致，在虚拟机中使用【**ifconfig**】命令查询你的ip </blockquote><blockquote><h3>（四）检查虚拟机是否启动远程调试服务器</h3><h3>（五）检查【**调试选项窗口**】的Port一栏填写的端口是否与虚拟机中监听的端口一致</h3><h3>（六）32位虚拟机系统应该要启动linux_server而非linux_server64</h3><p><img src="'+h+'" alt=""></p></blockquote><blockquote><h3>（七）检查主机和虚拟机是否能互相ping通</h3> 如果通过以上方法都无法解决，你可能和本蒟蒻博主遇到的是这个相同的问题 【**ping**】命令是用来检测两台机器（系统）是否联网或者物理联通的，如果主机和虚拟机无法互相ping通，调试服务器的代理功能自然无法发挥 （自行测试：打开cmd窗口ping虚拟机的ip；虚拟机中ping本机的ip&lt;-本机ip在cmd窗口中使用【**ipconfig**】查看） 如果确实无法联通，请按照如下做法—— <h4>1.重置虚拟网络配置</h4> 【**编辑**】-&gt;【**虚拟网络编辑器**】-&gt;【**更改设置**】-&gt;【**还原默认配置**】，然后**重启虚拟机** <p><img src="'+b+'" alt=""></p><h4>2.设置网络连接模式</h4> 【**虚拟机**】-&gt;【**设置**】-&gt;【**NAT模式**】 <p><img src="'+f+'" alt=""></p><h4>3.设置静态ip</h4> 使用命令【**cd/etc/network**】-&gt;使用命令【ls】（无关紧要，查看目录而已，可省略）-&gt;使用命令【**sudo vim interfaces**】，接下来要编辑这个文件，**sudo**用于声明管理权限！ ![](./assets/53eda5310ec9d845a10686808a237c6d.png) **按i键**进入插入内容模式，将如下内容**修改成符合自己的情况后**复制到文件中，要改的其实只有倒数第一行和倒数第三行，因为虚拟机分配的子网ip不同，必须要设置成符合自己的 例如，我这里分配的子网ip是【**192.168.158.0**】，因此我设置了address为【**192.168.158.142**】，gateway为【**192.168.158.2**】，这里需要**保证ip的前3部分一致**（都是计网基础了，蒟蒻博主当初也没好好学计网，早晚得还的/(ㄒoㄒ)/~~） <div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>auto lo</span></span>\n<span class="line"><span>iface lo inet loopback</span></span>\n<span class="line"><span>auto eth0</span></span>\n<span class="line"><span>iface eth0 inet static</span></span>\n<span class="line"><span>address 192.168.158.142</span></span>\n<span class="line"><span>netmask 255.255.255.0</span></span>\n<span class="line"><span>gateway 192.168.158.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么查看自己分配的子网ip？【<strong>编辑</strong>】-&gt;【<strong>虚拟网络编辑器</strong>】 <img src="'+v+'" alt=""></p><p>写入文件后，【<strong>esc</strong>】退出插入内容模式，按冒号键【<strong>:</strong>】-&gt;输入wq退出并保存 最后使用命令【<strong>systemctl restart networking</strong>】重启网络，完成配置 （自行测试：打开cmd窗口ping虚拟机的ip；虚拟机中ping本机的ip&lt;-本机ip在cmd窗口中使用【<strong>ipconfig</strong>】查看，测试成功后再次尝试ida远程调试连接）</p></blockquote>',39)]))}]]),q=JSON.parse('{"path":"/article/9nn6z102/","title":"ida在kali-linux虚拟机上进行远程调试","lang":"zh-CN","frontmatter":{"title":"ida在kali-linux虚拟机上进行远程调试","createTime":"2024/10/11 15:00:00","tags":["学习","CTF","逆向"],"permalink":"/article/9nn6z102/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem(\'vuepress-theme-appearance\') || \'auto\';const sm = window.matchMedia && window.matchMedia(\'(prefers-color-scheme: dark)\').matches;const isDark = um === \'dark\' || (um !== \'light\' && sm);document.documentElement.dataset.theme = isDark ? \'dark\' : \'light\';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle(\'mac\', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"一，自编译c语言文件生成elf程序","slug":"一-自编译c语言文件生成elf程序","link":"#一-自编译c语言文件生成elf程序","children":[{"level":3,"title":"（一）创建c语言文件","slug":"一-创建c语言文件","link":"#一-创建c语言文件","children":[]},{"level":3,"title":"（二）编译c语言文件生成elf程序","slug":"二-编译c语言文件生成elf程序","link":"#二-编译c语言文件生成elf程序","children":[]}]},{"level":2,"title":"二，复制ida的linux_server64程序到kali-linux虚拟机中并启动，建立远程调试桥梁","slug":"二-复制ida的linux-server64程序到kali-linux虚拟机中并启动-建立远程调试桥梁","link":"#二-复制ida的linux-server64程序到kali-linux虚拟机中并启动-建立远程调试桥梁","children":[]},{"level":2,"title":"三，打开本地ida，连接kali-linux虚拟机，进行远程调试","slug":"三-打开本地ida-连接kali-linux虚拟机-进行远程调试","link":"#三-打开本地ida-连接kali-linux虚拟机-进行远程调试","children":[]},{"level":2,"title":"四，提供可能的解决无法连接的思路","slug":"四-提供可能的解决无法连接的思路","link":"#四-提供可能的解决无法连接的思路","children":[]}],"readingTime":{"minutes":6.02,"words":1807},"filePathRelative":"2.ctf/ida在kali-linux虚拟机上进行远程调试.md","categoryList":[{"id":"fb53bb","sort":2,"name":"ctf"}]}')}}]);