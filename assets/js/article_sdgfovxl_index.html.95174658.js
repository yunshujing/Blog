"use strict";(self.webpackChunkyskye=self.webpackChunkyskye||[]).push([[915],{8796:(l,i,n)=>{n.r(i),n.d(i,{comp:()=>e,data:()=>g});var r=n(641);const t={id:"前置要求",tabindex:"-1"},s={class:"header-anchor",href:"#前置要求"},o={},e=(0,n(6262).A)(o,[["render",function(l,i){const n=(0,r.g2)("font");return(0,r.uX)(),(0,r.CE)("div",null,[(0,r.Lk)("h2",t,[(0,r.Lk)("a",s,[(0,r.Lk)("span",null,[(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[0]||(i[0]=[(0,r.eW)("前置要求")]))),_:1})])])]),(0,r.Lk)("ul",null,[(0,r.Lk)("li",null,[(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[1]||(i[1]=[(0,r.eW)("准备好电脑能用的 VPN，推荐 Cloudflare Warp，没有账号的来找我要。")]))),_:1})]),(0,r.Lk)("li",null,[(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[2]||(i[2]=[(0,r.eW)("下载 VMware Workstation 虚拟机并安装 Kali Linux，后续学习我不管别人怎么建议的，")]))),_:1}),i[5]||(i[5]=(0,r.eW)("**")),(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[3]||(i[3]=[(0,r.eW)("必须")]))),_:1}),i[6]||(i[6]=(0,r.eW)("**")),(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[4]||(i[4]=[(0,r.eW)("在 Linux 中完成代码的编写、编译、运行。")]))),_:1})]),(0,r.Lk)("li",null,[(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[7]||(i[7]=[(0,r.eW)("注册阿里通义千问、腾讯混元大模型、百度文心一言这几个人工智能，有能力的可以使用 ChatGPT Plus（这个最好但是需要付费的 VPN）有问题首先问人工智能并通过 Google 找答案（不允许使用百度搜索答案）英语不行装沉浸式翻译插件或者用 deepL 翻译，问题解决不了第一时间dd我，看到会回（别不查就问）")]))),_:1})]),(0,r.Lk)("li",null,[(0,r.Lk)("strong",null,[(0,r.bF)(n,{style:{color:"#DF2A3F"}},{default:(0,r.k6)((()=>i[8]||(i[8]=[(0,r.eW)("注册语雀记录归纳学习笔记及心得，锻炼知识归纳能力也能防止学了又忘的健忘型选手，也可以用于企业面试复习，百利无一害的习惯")]))),_:1})])])]),i[13]||(i[13]=(0,r.Fv)('<h2 id="第一阶段-编程基础" tabindex="-1"><a class="header-anchor" href="#第一阶段-编程基础"><span>第一阶段：编程基础</span></a></h2><ul><li>掌握 C 语言基础语法，必须清楚比特运算（<code>AND``OR``NOT``XOR</code>）的原理（后续会遇到大量运用比特运算的加密）、指针及数组的使用、内存分配。推荐资源：浙大翁凯C程序设计、阮一峰C教程、黑书C程序设计</li><li>掌握 Linux 的基础操作及编写 C 代码并运行的方法（熟悉 Linux 的基本使用，安装 Sublime Text，在命令行中使用 gcc 编译 c 代码并运行，遇到困难首先考虑问人工智能，解决不了来问我）</li><li>掌握一定的数据结构基础，熟练掌握链表与栈这两种结构，推荐资源：Hello算法</li><li>掌握基础的 Python 代码编写能力。推荐资源：网易云课堂大熊 Python（我买过了直接找我要账号就行）</li></ul><h2 id="第二阶段-冯诺依曼架构基础" tabindex="-1"><a class="header-anchor" href="#第二阶段-冯诺依曼架构基础"><span>第二阶段：冯诺依曼架构基础</span></a></h2><ul><li>计算机组成原理：清楚 CPU 为什么能理解二进制指令，推荐资源：ELE实验室从0开始设计一台计算机</li><li>汇编语言：清楚汇编语言如何操作内存与寄存器，清楚汇编语言和二进制指令的关系，推荐资源：王爽汇编语言，阿布编程系列视频</li></ul><p>要求掌握：汇编语言基础、godbolt.org 的使用、C 源代码与汇编语言间的关联</p><p>学习建议：在掌握汇编语言基础后找阮一峰的C语言教程再看一遍，边看边用 godbolt.org 查看 C 语言与汇编语言的对应关系，尝试理解C语言是如何操作内存的</p><h2 id="第三阶段-软件构建原理" tabindex="-1"><a class="header-anchor" href="#第三阶段-软件构建原理"><span>第三阶段：软件构建原理</span></a></h2><p>了解 C 语言从源代码到可执行文件的全过程：预处理、编译、汇编、链接。</p>',8)),(0,r.Lk)("ul",null,[i[11]||(i[11]=(0,r.Lk)("li",null,"预处理：C语言饱受诟病的一个特性，大部分过程为宏展开与条件编译、无需深究",-1)),i[12]||(i[12]=(0,r.Lk)("li",null,"编译：编译器对 C 代码进行词法分析、句法分析、构建AST树、最后将c代码转换为汇编代码（涉及领域：编译原理）",-1)),(0,r.Lk)("li",null,[(0,r.bF)(n,{style:{color:"#5C8D07"}},{default:(0,r.k6)((()=>i[9]||(i[9]=[(0,r.eW)("汇编：将汇编代码转换为对应的 CPU 指令机器码（涉及领域：计算机组成原理、指令集、汇编语言）")]))),_:1})]),(0,r.Lk)("li",null,[(0,r.bF)(n,{style:{color:"#5C8D07"}},{default:(0,r.k6)((()=>i[10]||(i[10]=[(0,r.eW)("链接：将多个汇编后的二进制文件与系统库函数文件整合成一个可执行程序（涉及领域：程序链接、系统库、运行时库，可执行文件格式）")]))),_:1})])]),i[14]||(i[14]=(0,r.Fv)('<p>学习建议：因为这个阶段涉及到大量底层知识，熟练掌握的可能性几乎为零，目前大致了解原理即可，后续用到再深入研究）</p><p>推荐资料：忘了看过哪些好的资料了，bilibili 去翻一翻</p><h2 id="第四阶段-操作系统为何能运行成千上万的软件" tabindex="-1"><a class="header-anchor" href="#第四阶段-操作系统为何能运行成千上万的软件"><span>第四阶段：操作系统为何能运行成千上万的软件</span></a></h2><ul><li>了解操作系统的原理，了解系统中断 syscall 是什么，了解内核态 用户态（ring0 ring3）是什么</li><li>了解可执行文件的构成（PE / ELF 文件格式）</li><li>搞懂什么是系统库、运行时库（dll / so 文件）</li><li>再次学习静态链接、动态链接的目的并清楚链接器如何对符号进行重定位</li><li>搞懂程序是如何被操作系统加载器装载至内存并运行的，掌握可执行文件段与虚拟地址的对应关系（.data 段 .bss 段 .text 段 --&gt; 内存数据区 栈区 堆区 库函数区），弄懂之前写的 C 语言程序为什么会出现 segmentation fault 崩溃，弄懂 shellcode 为什么不需要操作系统加载即可运行</li></ul><p>推荐资料：程序员的自我修养：链接、装载与库 （当参考书）Linux 源码趣读</p><p>到了这里你对底层的理解已经超越了大部分的程序员，知识深度大概到了阿里 p5的级别，如果对二进制安全感兴趣或者想挑战自己对基础的理解可以选择进行二进制安全的学习 😃</p><h2 id="第五阶段-实战型-打开二进制安全的大门" tabindex="-1"><a class="header-anchor" href="#第五阶段-实战型-打开二进制安全的大门"><span>第五阶段（实战型）：打开二进制安全的大门</span></a></h2><p>到了这个阶段就大概分为了三个方向：</p><ul><li>逆向分析：分析程序逻辑，尝试进行破解 <ul><li>需要具备一定的算法与密码学基础</li><li>掌握静态分析工具 ida ghidra 的使用</li><li>了解反调试技术（UXP VMP 壳）及对抗方法</li><li>了解其他语言的逆向分析，如 Python Lua Java</li></ul></li><li>PWN：分析程序缺陷，并利用缺陷攻击程序 <ul><li>具备一定的逆向分析能力</li><li>掌握 python pwntools 的使用</li><li>掌握动态调试工具的使用 gdb pwngdb pwndbg 的使用</li><li>掌握常见代码缺陷的利用方式：栈溢出 堆利用 堆喷射 UAF ret2shellcode ROP 链 etc）</li><li>掌握操作系统对程序的保护 ALSR PIE 等及侧信道攻击方法</li><li>掌握 patch diff 定位漏洞等技术</li></ul></li><li>二进制武器开发与分析： <ul><li>免杀，RootKit 技术</li><li>二进制漏洞分析，虚拟机逃逸技术，IoT 漏洞挖掘，工控系统安全</li><li>Windows 高级编程</li></ul></li></ul><p>推荐资料：bilibili 滴水逆向，知识星球：轩辕之风从0开始入门逆向</p><h2 id="第六阶段-学术型-基于人工智能的二进制安全分析方法" tabindex="-1"><a class="header-anchor" href="#第六阶段-学术型-基于人工智能的二进制安全分析方法"><span>第六阶段（学术型）：基于人工智能的二进制安全分析方法</span></a></h2><p>阅读相关的研究论文和开源项目（如TensorFlow、PyTorch），并实践使用这些工具分析二进制文件</p><hr><p><strong>CTF 逆向工程（Reverse Engineering）和 Pwn 学习路线及建议</strong></p><p>参加 CTF（Capture The Flag）比赛是提升网络安全实践技能的绝佳方式，尤其是在逆向工程和 Pwn（二进制漏洞利用）领域。以下是一份详细的学习路线，旨在指导你从基础知识到高级技术的逐步提升。</p><hr><h3 id="前置要求-1" tabindex="-1"><a class="header-anchor" href="#前置要求-1"><span><strong>前置要求</strong></span></a></h3><p>在深入学习逆向工程和 Pwn 之前，确保你已经具备以下基础：</p><ol><li><strong>编程语言：</strong><ul><li><strong>C 和 C++：</strong> 理解底层代码和内存管理的关键。</li><li><strong>Python：</strong> 用于编写脚本和自动化任务。</li><li><strong>汇编语言（x86/x64）：</strong> 逆向工程二进制文件的必要技能。</li></ul></li><li><strong>操作系统：</strong><ul><li><strong>Linux：</strong> 熟悉命令行操作和系统内部机制。</li><li><strong>Windows（针对逆向工程）：</strong> 理解 Windows 内部机制，便于分析 Windows 平台的二进制文件。</li></ul></li><li><strong>计算机组成原理：</strong><ul><li>了解 CPU 架构、内存层次结构和指令集。</li></ul></li><li><strong>数据结构和算法：</strong><ul><li>掌握常用数据结构（数组、链表、栈、队列、树）。</li><li>熟悉算法，用于问题解决。</li></ul></li></ol><hr><h3 id="学习路线" tabindex="-1"><a class="header-anchor" href="#学习路线"><span><strong>学习路线</strong></span></a></h3><h4 id="阶段一-基础知识" tabindex="-1"><a class="header-anchor" href="#阶段一-基础知识"><span><strong>阶段一：基础知识</strong></span></a></h4><p><strong>1. 精通编程</strong></p><ul><li><strong>行动计划：</strong><ul><li>深入学习 C 和 C++，理解指针、内存分配和管理。</li><li>使用 Python 进行脚本编写，解决简单的问题。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《C 程序设计语言》（Kernighan 和 Ritchie 著）</li><li>《C 和指针》（Kenneth A. Reek 著）</li><li>《Python 编程：从入门到实践》（Eric Matthes 著）</li><li>在线平台：LeetCode、牛客网用于算法练习。</li></ul></li></ul><p><strong>2. 掌握 Linux</strong></p><ul><li><strong>行动计划：</strong><ul><li>在虚拟机中安装 Linux 发行版（如 Ubuntu、Kali Linux）。</li><li>学习基本和高级的 Shell 命令。</li><li>理解文件权限、进程管理和网络基础。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《鸟哥的 Linux 私房菜》（鸟哥 著）</li><li>《Linux 命令行与 Shell 脚本编程大全》（Richard Blum 著）</li><li>在线教程：Linux Journey、OverTheWire Bandit 挑战。</li></ul></li></ul><h4 id="阶段二-汇编语言和调试" tabindex="-1"><a class="header-anchor" href="#阶段二-汇编语言和调试"><span><strong>阶段二：汇编语言和调试</strong></span></a></h4><p><strong>1. 汇编语言</strong></p><ul><li><strong>行动计划：</strong><ul><li>学习 x86 和 x64 汇编语言的语法和指令集。</li><li>编写简单的汇编程序，理解指令执行流程。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《汇编语言》（王爽 著）</li><li>《现代 X86 汇编语言程序设计》（Daniel Kusswurm 著）</li><li>在线教程：Assemble语言入门（廖雪峰博客）</li></ul></li></ul><p><strong>2. 调试工具</strong></p><ul><li><strong>行动计划：</strong><ul><li>熟悉 GDB（GNU 调试器）的使用，调试二进制程序。</li><li>学习设置断点、查看内存、逐步执行代码。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《GDB 调试手册》（Jim Blandy 著）</li><li>在线教程：GDB 官方文档，YouTube 上的 LiveOverflow 系列。</li></ul></li><li><strong>工具：</strong><ul><li><strong>GDB</strong>：GNU 调试器。</li><li><strong>Peda</strong>：GDB 的扩展插件，增强了调试功能。</li></ul></li></ul><h4 id="阶段三-逆向工程基础" tabindex="-1"><a class="header-anchor" href="#阶段三-逆向工程基础"><span><strong>阶段三：逆向工程基础</strong></span></a></h4><p><strong>1. 静态分析</strong></p><ul><li><strong>行动计划：</strong><ul><li>学习阅读和理解反汇编代码。</li><li>理解控制流图（CFG）和函数调用关系。</li><li>分析二进制文件的结构和执行逻辑。</li></ul></li><li><strong>工具：</strong><ul><li><strong>IDA Freeware</strong>：行业标准的静态分析工具。</li><li><strong>Ghidra</strong>：开源的逆向工程工具，由 NSA 发布。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《逆向工程权威指南》（Eldad Eilam 著）</li><li>在线教程：Ghidra 官方文档，Bilibili 上的相关教学视频。</li></ul></li></ul><p><strong>2. 动态分析</strong></p><ul><li><strong>行动计划：</strong><ul><li>在受控环境中运行二进制文件，观察其行为。</li><li>使用调试器监控程序在执行时的状态。</li></ul></li><li><strong>工具：</strong><ul><li><strong>GDB-PEDA</strong>：增强版的 GDB，提供了许多辅助功能。</li><li><strong>Radare2</strong>：强大的开源逆向工程框架。</li><li><strong>Binary Ninja（收费）</strong>：用户友好的逆向工程工具。</li></ul></li></ul><p><strong>3. 文件格式</strong></p><ul><li><strong>行动计划：</strong><ul><li>学习可执行文件格式，如 ELF（Linux）、PE（Windows）。</li><li>理解文件的各个段（section）、头部信息和加载过程。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《ELF 文件格式解析》（网上资料）</li><li>《加密与解密》（ 薛永峰 著）</li></ul></li></ul><h4 id="阶段四-二进制漏洞利用-pwn" tabindex="-1"><a class="header-anchor" href="#阶段四-二进制漏洞利用-pwn"><span><strong>阶段四：二进制漏洞利用（Pwn）</strong></span></a></h4><p><strong>1. 内存漏洞</strong></p><ul><li><strong>主题：</strong><ul><li>栈溢出（Stack Overflow）</li><li>堆溢出（Heap Overflow）</li><li>格式化字符串漏洞（Format String）</li><li>空指针引用、双重释放、整数溢出等。</li></ul></li><li><strong>行动计划：</strong><ul><li>编写含有这些漏洞的示例程序。</li><li>理解漏洞产生的原因和利用方式。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《漏洞战争：软件漏洞分析精要》（刘焱飞 著）</li><li>《黑客攻防技术宝典：系统实战篇》（Kyle Rankin 著）</li></ul></li></ul><p><strong>2. 漏洞利用技巧</strong></p><ul><li><strong>工具：</strong><ul><li><strong>Pwntools</strong>：用于编写漏洞利用脚本的 Python 库。</li><li><strong>OneGadget</strong>：查找 libc 中可用的 one_gadget。</li><li><strong>ROPgadget</strong>：用于查找 ROP（Return-Oriented Programming）链的工具。</li></ul></li><li><strong>行动计划：</strong><ul><li>学习利用栈溢出执行任意代码。</li><li>掌握 ROP 技术，构造 ROP 链。</li><li>了解返回到 libc（ret2libc）的利用方法。</li></ul></li></ul><p><strong>3. 绕过保护机制</strong></p><ul><li><strong>主题：</strong><ul><li>ASLR（地址空间布局随机化）</li><li>NX（不可执行栈）</li><li>Stack Canaries（栈金丝雀）</li><li>PIE（位置无关可执行文件）</li><li>RELRO（可重定位表只读）</li></ul></li><li><strong>行动计划：</strong><ul><li>理解这些保护机制的工作原理。</li><li>学习如何在存在保护机制的情况下进行漏洞利用。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《Pwn2Own：Linux 二进制安全剖析》（张福新 著）</li><li>在线博客：l4w.io、xz.aliyun.com</li></ul></li></ul><p><strong>4. 实战练习</strong></p><ul><li><strong>行动计划：</strong><ul><li>参与在线 Pwn 题目的练习，提高实战能力。</li><li>分析 CTF 比赛中的经典 Pwn 题目，阅读他人写的 Writeup。</li></ul></li><li><strong>平台：</strong><ul><li><strong>CTF Wiki</strong>：提供了大量的题目和解析。</li><li><strong>Pwnable.kr</strong>：专注于 Pwn 练习的平台。</li><li><strong>牛客网</strong>：提供 CTF 相关的练习题。</li></ul></li></ul><h4 id="阶段五-高级逆向工程" tabindex="-1"><a class="header-anchor" href="#阶段五-高级逆向工程"><span><strong>阶段五：高级逆向工程</strong></span></a></h4><p><strong>1. 反混淆和反调试</strong></p><ul><li><strong>行动计划：</strong><ul><li>学习常见的代码混淆和加壳技术。</li><li>了解反调试方法，学习如何绕过反调试机制。</li></ul></li><li><strong>工具：</strong><ul><li><strong>Unpackers</strong>：用于脱壳的工具，如 UPX、PEiD。</li><li><strong>Scylla</strong>：Dump 进程内存的工具。</li><li><strong>OllyDbg（Windows）</strong>：强大的调试器，适用于反混淆。</li></ul></li></ul><p><strong>2. 恶意软件分析基础</strong></p><ul><li><strong>行动计划：</strong><ul><li>在虚拟机中分析简单的恶意软件样本。</li><li>了解恶意软件的常见行为，如持久化、进程注入、网络通信。</li></ul></li><li><strong>推荐资源：</strong><ul><li>《实用恶意代码分析》（Michael Sikorski 和 Andrew Honig 著）</li><li>在线课程：Malware Unicorn 的恶意软件分析教程。</li></ul></li></ul><p><strong>3. 其他平台的逆向工程</strong></p><ul><li><strong>主题：</strong><ul><li>移动应用逆向工程（Android APK、iOS 应用）</li><li>固件和物联网设备的逆向工程</li><li>游戏逆向与外挂编写</li></ul></li><li><strong>行动计划：</strong><ul><li>学习 ARM 架构的汇编语言。</li><li>使用工具如 Jadx、APKTool 分析 Android 应用。</li><li>研究固件的提取和分析方法。</li></ul></li></ul><h4 id="阶段六-实践应用" tabindex="-1"><a class="header-anchor" href="#阶段六-实践应用"><span><strong>阶段六：实践应用</strong></span></a></h4><p><strong>1. 参加 CTF 比赛</strong></p><ul><li><strong>平台：</strong><ul><li><strong>CTFTime</strong>：获取最新的 CTF 比赛信息。</li><li><strong>picoCTF</strong>：适合初学者的 CTF 挑战。</li><li><strong>XCTF</strong>：国内的 CTF 比赛平台。</li></ul></li><li><strong>行动计划：</strong><ul><li>组建或加入一个 CTF 战队，参与线上线下的比赛。</li><li>赛后总结，撰写 Writeup，分享经验。</li></ul></li></ul><p><strong>2. 构建个人作品集</strong></p><ul><li><strong>行动计划：</strong><ul><li>记录解决的挑战和编写详细的解析文章。</li><li>开发自己的工具或参与开源项目，为社区做贡献。</li></ul></li></ul><p><strong>3. 加入社区</strong></p><ul><li><strong>行动计划：</strong><ul><li>参与网络安全相关的论坛和交流群，如先知社区、FreeBuf 社区。</li><li>关注安全领域的专家，学习最新的技术和资讯。</li></ul></li></ul><hr><h3 id="额外建议" tabindex="-1"><a class="header-anchor" href="#额外建议"><span><strong>额外建议</strong></span></a></h3><p><strong>1. 持续学习</strong></p><ul><li><strong>保持更新：</strong><ul><li>关注安全研究人员的博客和微博。</li><li>订阅安全资讯，如 Seebug Paper、360 安全播报。</li></ul></li></ul><p><strong>2. 道德和法律意识</strong></p><ul><li><strong>合法合规：</strong><ul><li>仅在你拥有或得到明确授权的系统上进行测试和逆向工程。</li><li>尊重他人的隐私和知识产权，不传播或利用非法信息。</li></ul></li></ul><p><strong>3. 资源整合</strong></p><ul><li><strong>书籍推荐：</strong><ul><li>《灰帽黑客》（Allen Harper 等 著）</li><li>《二进制程序分析》（Dennis Andriesse 著）</li><li>《Shellcoder&#39;s Handbook》（Chris Anley 等 著）</li></ul></li><li><strong>在线课程：</strong><ul><li><strong>网易云课堂</strong>：相关的网络安全课程。</li><li><strong>慕课网</strong>：提供大量的 IT 技术课程。</li></ul></li><li><strong>博客和网站：</strong><ul><li><strong>先知社区（xz.aliyun.com）</strong></li><li><strong>乌云镜像（wooyun.org）</strong></li><li><strong>看雪论坛（kanxue.com）</strong></li></ul></li></ul><hr><h3 id="学习技巧" tabindex="-1"><a class="header-anchor" href="#学习技巧"><span><strong>学习技巧</strong></span></a></h3><ul><li><strong>实践为王：</strong> 理论重要，但实践经验更关键。定期通过挑战和项目应用所学知识。</li><li><strong>循序渐进：</strong> 从简单的挑战开始，随着技能的提升，逐步尝试更复杂的问题。</li><li><strong>教学相长：</strong> 向他人解释概念或撰写博客，可以加强你的理解。</li><li><strong>积极思考：</strong> 培养解决问题的态度。面对困难的 CTF 题目，坚持不懈和创造性是克服挑战的关键。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><p>踏上掌握 CTF 逆向工程和 Pwn 挑战的旅程既充满挑战，又令人兴奋。通过遵循这条系统的学习路线，积极参与网络安全社区，你将发展出在比赛中脱颖而出的技能，并为网络安全领域做出贡献。</p><p>记住，目标不仅是赢得比赛，更是深入理解软件安全的基本原理、漏洞发现和利用技术。这些知识对于构建安全的系统和防御恶意攻击具有无价的价值。</p><hr><p>希望这份详尽的学习路线和建议能帮助你在 CTF 逆向工程和 Pwn 的道路上取得进步。如有任何疑问，欢迎随时提问。祝你学习顺利，比赛中取得优异的成绩！</p><p>目前我只想到了这么多，大部分和安全不是很相关的内容已经被我去掉了，等之后想起啥再补充。</p>',79))])}]]),g=JSON.parse('{"path":"/article/sdgfovxl/","title":"二进制学习建议","lang":"zh-CN","frontmatter":{"title":"二进制学习建议","createTime":"2024/09/18 22:00:00","tags":["学习","CTF","PWN"],"permalink":"/article/sdgfovxl/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem(\'vuepress-theme-appearance\') || \'auto\';const sm = window.matchMedia && window.matchMedia(\'(prefers-color-scheme: dark)\').matches;const isDark = um === \'dark\' || (um !== \'light\' && sm);document.documentElement.dataset.theme = isDark ? \'dark\' : \'light\';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle(\'mac\', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"前置要求","slug":"前置要求","link":"#前置要求","children":[]},{"level":2,"title":"第一阶段：编程基础","slug":"第一阶段-编程基础","link":"#第一阶段-编程基础","children":[]},{"level":2,"title":"第二阶段：冯诺依曼架构基础","slug":"第二阶段-冯诺依曼架构基础","link":"#第二阶段-冯诺依曼架构基础","children":[]},{"level":2,"title":"第三阶段：软件构建原理","slug":"第三阶段-软件构建原理","link":"#第三阶段-软件构建原理","children":[]},{"level":2,"title":"第四阶段：操作系统为何能运行成千上万的软件","slug":"第四阶段-操作系统为何能运行成千上万的软件","link":"#第四阶段-操作系统为何能运行成千上万的软件","children":[]},{"level":2,"title":"第五阶段（实战型）：打开二进制安全的大门","slug":"第五阶段-实战型-打开二进制安全的大门","link":"#第五阶段-实战型-打开二进制安全的大门","children":[]},{"level":2,"title":"第六阶段（学术型）：基于人工智能的二进制安全分析方法","slug":"第六阶段-学术型-基于人工智能的二进制安全分析方法","link":"#第六阶段-学术型-基于人工智能的二进制安全分析方法","children":[{"level":3,"title":"前置要求","slug":"前置要求-1","link":"#前置要求-1","children":[]},{"level":3,"title":"学习路线","slug":"学习路线","link":"#学习路线","children":[]},{"level":3,"title":"额外建议","slug":"额外建议","link":"#额外建议","children":[]},{"level":3,"title":"学习技巧","slug":"学习技巧","link":"#学习技巧","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"readingTime":{"minutes":13.24,"words":3971},"filePathRelative":"2.ctf/二进制安全学习建议.md","categoryList":[{"id":"fb53bb","sort":2,"name":"ctf"}]}')}}]);