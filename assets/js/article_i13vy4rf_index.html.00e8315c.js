"use strict";(self.webpackChunkyskye=self.webpackChunkyskye||[]).push([[182],{9232:(s,i,n)=>{n.r(i),n.d(i,{comp:()=>p,data:()=>t});var a=n(641);const e=n.p+"assets/img/f1baa087f2294c1dac815598e06da063.dc7d15f1.png",l={},p=(0,n(6262).A)(l,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<blockquote><p>文章转载自<a href="https://blog.csdn.net/liKeQing1027520/article/details/138533062?spm=1001.2014.3001.5502" target="_blank" rel="noopener noreferrer">CTF-reverse逆向分析解题常用脚本汇总_ctf reverse-CSDN博客</a></p></blockquote><blockquote><p>注：本篇用于记录一些CTF-reverse中可能用上的脚本，脚本都来源于博主解出某道题后留下，如果遇上类似的题目，根据<strong>脚本中****注释</strong>的提示更改对应的<strong>密文密钥或条件</strong>即可快速解题！ 持续更新！！<strong>点个收藏关注不迷路~</strong></p></blockquote><h2 id="一-aes解密" tabindex="-1"><a class="header-anchor" href="#一-aes解密"><span>一，AES解密</span></a></h2><p>原文链接-&gt;<a href="https://blog.csdn.net/liKeQing1027520/article/details/137024097" target="_blank" rel="noopener noreferrer">AES加密解密算法_aes解密-CSDN博客</a></p><blockquote><p>你需要： ①在题目中找到密钥，赋值给脚本中的key变量 ②找到密文，赋值给脚本中的cipher变量 ③运行即可获得明文</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>from Crypto.Cipher import AES</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>def AES_dec(cipher, key):</span></span>\n<span class="line"><span>    key = key.encode()</span></span>\n<span class="line"><span>    cipher = bytes.fromhex(cipher)</span></span>\n<span class="line"><span>    aes = AES.new(key, AES.MODE_ECB) #创建一个AES解密对象，需要传入密钥和加密模式（这里是ECB模式）</span></span>\n<span class="line"><span>    return aes.decrypt(cipher).decode() #返回解密结果</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>\n<span class="line"><span>    key = &#39;1234567890123456&#39; </span></span>\n<span class="line"><span>    #注意解密过程中密文的格式需要为byte类型，本题获取到的是十六进制文本，处理成字符串后使用bytes.fromhex()函数转为对应的字节数组</span></span>\n<span class="line"><span>    cipher = &#39;F3498AED82CE44E2357C23F5DCF897A43B6A7BFEE0467C591E301CBC38F99913&#39;</span></span>\n<span class="line"><span>    res = AES_dec(cipher, key)</span></span>\n<span class="line"><span>    print(res)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-z3求解器-求解约束方程未知数" tabindex="-1"><a class="header-anchor" href="#二-z3求解器-求解约束方程未知数"><span>二，z3求解器（求解约束方程未知数）</span></a></h2><p>原文链接-&gt;<a href="https://blog.csdn.net/liKeQing1027520/article/details/138047537" target="_blank" rel="noopener noreferrer">z3求解器脚本（CTF-reverse必备）-CSDN博客</a></p><blockquote><p>你需要： ①使用第一个脚本可以将题目中的一大串条件转换成列表，以便直接套用第二个脚本，具体看本篇-&gt; <a href="https://blog.csdn.net/liKeQing1027520/article/details/141174137?spm=1001.2014.3001.5502" target="_blank" rel="noopener noreferrer">批量替换字符串中的某子串序列为对应的另一子串序列（z3求解器解多元方程时很好用）-CSDN博客</a> ②将脚本1处理得到的列表赋值给脚本2的fc列表 ②运行后即可获得解（该脚本自动将解按v[0]~v[n]的升序<a href="https://blog.csdn.net/liKeQing1027520/article/details/137441614" target="_blank" rel="noopener noreferrer">CTF-reverse-simpleRE（base64变表逆向）-CSDN博客</a>排列并转换成了对应的ASCII码，如果题目有格外加密，自行修改脚本即可）</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import re</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>def replace_func(match):</span></span>\n<span class="line"><span>    shift = 2 #shift是指第一个未知数和0的差，例如：如果题目中第一个未知数是v2（如果是v3），那么shift就设置成2（就设置成3）</span></span>\n<span class="line"><span>    index = int(match.group(1)) - shift</span></span>\n<span class="line"><span>    return str(f&#39;v[{index}]&#39;)  # 返回字符串&#39;v[a后数字-1]&#39;，用其替换匹配到的an</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>\n<span class="line"><span>    s1 = &quot;245 * v6 + 395 * v5 + 3541 * v4 + 2051 * v3 + 3201 * v2 + 1345 * v7 != 855009| | 3270 * v6 + 3759 * v5 + 3900 * v4 + 3963 * v3 + 1546 * v2 + 3082 * v7 != 1515490| | 526 * v6 + 2283 * v5 + 3349 * v4 + 2458 * v3 + 2012 * v2 + 268 * v7 != 854822| | 3208 * v6 + 2021 * v5 + 3146 * v4 + 1571 * v3 + 2569 * v2 + 1395 * v7 != 1094422| | 3136 * v6 + 3553 * v5 + 2997 * v4 + 1824 * v3 + 1575 * v2 + 1599 * v7 != 1136398| | 2300 * v6 + 1349 * v5 + 86 * v4 + 3672 * v3 + 2908 * v2 + 1681 * v7 != 939991| | 212 * v22 + 153 * v21 + 342 * v20 + 490 * v12 + 325 * v11 + 485 * v10 + 56 * v9 + 202 * v8 + 191 * v23 != 245940| | 348 * v22 + 185 * v21 + 134 * v20 + 153 * v12 + 460 * v9 + 207 * v8 + 22 * v10 + 24 * v11 + 22 * v23 != 146392| | 177 * v22 + 231 * v21 + 489 * v20 + 339 * v12 + 433 * v11 + 311 * v10 + 164 * v9 + 154 * v8 + 100 * v23 != 239438| | 68 * v20 + 466 * v12 + 470 * v11 + 22 * v10 + 270 * v9 + 360 * v8 + 337 * v21 + 257 * v22 + 82 * v23 != 233887| | 246 * v22 + 235 * v21 + 468 * v20 + 91 * v12 + 151 * v11 + 197 * v8 + 92 * v9 + 73 * v10 + 54 * v23 != 152663| | 241 * v22 + 377 * v21 + 131 * v20 + 243 * v12 + 233 * v11 + 55 * v10 + 376 * v9 + 242 * v8 + 343 * v23 != 228375| | 356 * v22 + 200 * v21 + 136 * v11 + 301 * v10 + 284 * v9 + 364 * v8 + 458 * v12 + 5 * v20 + 61 * v23 != 211183| | 154 * v22 + 55 * v21 + 406 * v20 + 107 * v12 + 80 * v10 + 66 * v8 + 71 * v9 + 17 * v11 + 71 * v23 != 96788| | 335 * v22 + 201 * v21 + 197 * v11 + 280 * v10 + 409 * v9 + 56 * v8 + 494 * v12 + 63 * v20 + 99 * v23 != 204625| | 428 * v18 + 1266 * v17 + 1326 * v16 + 1967 * v15 + 3001 * v14 + 81 * v13 + 2439 * v19 != 1109296| | 2585 * v18 + 4027 * v17 + 141 * v16 + 2539 * v15 + 3073 * v14 + 164 * v13 + 1556 * v19 != 1368547| | 2080 * v18 + 358 * v17 + 1317 * v16 + 1341 * v15 + 3681 * v14 + 2197 * v13 + 1205 * v19 != 1320274| | 840 * v18 + 1494 * v17 + 2353 * v16 + 235 * v15 + 3843 * v14 + 1496 * v13 + 1302 * v19 != 1206735| | 101 * v18 + 2025 * v17 + 2842 * v16 + 1559 * v15 + 2143 * v14 + 3008 * v13 + 981 * v19 != 1306983| | 1290 * v18 + 3822 * v17 + 1733 * v16 + 292 * v15 + 816 * v14 + 1017 * v13 + 3199 * v19 != 1160573&quot;  # 定义包含an的字符串</span></span>\n<span class="line"><span>    s1 += &#39;| | 186 * v18 + 2712 * v17 + 2136 * v16 + 98 * v13 + 138 * v14 + 3584 * v15 + 1173 * v19 == 1005746&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    s1 = re.sub(r&#39;v(2[0-9]|1[0-9]|[1-9])&#39;, replace_func, s1)</span></span>\n<span class="line"><span>    # sub函数参数, pattern、repl、string分别表示：正则表达式匹配规则、替换后结果（可以是函数也可以是常量）、要被查找替换的原始字符串</span></span>\n<span class="line"><span>    s1 = re.sub(&#39;!&#39;, &#39;=&#39;, s1) #有些题目给的条件的方程是用&#39;||&#39;关系运算符连接的不等式方程，需要用这一行代码将&#39;!&#39;替换成&#39;=&#39;变成等式方程</span></span>\n<span class="line"><span>    res = s1.split(&#39;| | &#39;)</span></span>\n<span class="line"><span>    print(res)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>from z3 import *</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>def solver_eng(fc):</span></span>\n<span class="line"><span>    # 创建解释器对象</span></span>\n<span class="line"><span>    solver = Solver()</span></span>\n<span class="line"><span>    # 添加约束方程</span></span>\n<span class="line"><span>    for i in range(len(fc)):</span></span>\n<span class="line"><span>        solver.add(eval(fc[i])) #eval函数会将字符串形式的方程转换为z3模块能解析的方程</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    # 求解并转化为字符输出，得到flag</span></span>\n<span class="line"><span>    if solver.check() == sat:  # check()方法用来判断是否有解，sat(即satisify)表示满足有解</span></span>\n<span class="line"><span>        ans = solver.model()  # model()方法得到解</span></span>\n<span class="line"><span>        for i in v:</span></span>\n<span class="line"><span>            print(chr(ans[i].as_long()), end=&#39;&#39;)</span></span>\n<span class="line"><span>    # 一般不会无解，如果无解八成是未知数变量的类型不符合，或约束方程添加错误</span></span>\n<span class="line"><span>    else:</span></span>\n<span class="line"><span>        print(&quot;no ans!&quot;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>\n<span class="line"><span>    # 设置方程，请用脚本1将条件中的所有方程处理成列表，然后赋值给fc列表（这样你就不用一个一个方程慢慢去复制了）</span></span>\n<span class="line"><span>    fc = [&#39;245 * v[4] + 395 * v[3] + 3541 * v[2] + 2051 * v[1] + 3201 * v[0] + 1345 * v[5] == 855009&#39;, &#39;3270 * v[4] + 3759 * v[3] + 3900 * v[2] + 3963 * v[1] + 1546 * v[0] + 3082 * v[5] == 1515490&#39;, &#39;526 * v[4] + 2283 * v[3] + 3349 * v[2] + 2458 * v[1] + 2012 * v[0] + 268 * v[5] == 854822&#39;, &#39;3208 * v[4] + 2021 * v[3] + 3146 * v[2] + 1571 * v[1] + 2569 * v[0] + 1395 * v[5] == 1094422&#39;, &#39;3136 * v[4] + 3553 * v[3] + 2997 * v[2] + 1824 * v[1] + 1575 * v[0] + 1599 * v[5] == 1136398&#39;, &#39;2300 * v[4] + 1349 * v[3] + 86 * v[2] + 3672 * v[1] + 2908 * v[0] + 1681 * v[5] == 939991&#39;, &#39;212 * v[20] + 153 * v[19] + 342 * v[18] + 490 * v[10] + 325 * v[9] + 485 * v[8] + 56 * v[7] + 202 * v[6] + 191 * v[21] == 245940&#39;, &#39;348 * v[20] + 185 * v[19] + 134 * v[18] + 153 * v[10] + 460 * v[7] + 207 * v[6] + 22 * v[8] + 24 * v[9] + 22 * v[21] == 146392&#39;, &#39;177 * v[20] + 231 * v[19] + 489 * v[18] + 339 * v[10] + 433 * v[9] + 311 * v[8] + 164 * v[7] + 154 * v[6] + 100 * v[21] == 239438&#39;, &#39;68 * v[18] + 466 * v[10] + 470 * v[9] + 22 * v[8] + 270 * v[7] + 360 * v[6] + 337 * v[19] + 257 * v[20] + 82 * v[21] == 233887&#39;, &#39;246 * v[20] + 235 * v[19] + 468 * v[18] + 91 * v[10] + 151 * v[9] + 197 * v[6] + 92 * v[7] + 73 * v[8] + 54 * v[21] == 152663&#39;, &#39;241 * v[20] + 377 * v[19] + 131 * v[18] + 243 * v[10] + 233 * v[9] + 55 * v[8] + 376 * v[7] + 242 * v[6] + 343 * v[21] == 228375&#39;, &#39;356 * v[20] + 200 * v[19] + 136 * v[9] + 301 * v[8] + 284 * v[7] + 364 * v[6] + 458 * v[10] + 5 * v[18] + 61 * v[21] == 211183&#39;, &#39;154 * v[20] + 55 * v[19] + 406 * v[18] + 107 * v[10] + 80 * v[8] + 66 * v[6] + 71 * v[7] + 17 * v[9] + 71 * v[21] == 96788&#39;, &#39;335 * v[20] + 201 * v[19] + 197 * v[9] + 280 * v[8] + 409 * v[7] + 56 * v[6] + 494 * v[10] + 63 * v[18] + 99 * v[21] == 204625&#39;, &#39;428 * v[16] + 1266 * v[15] + 1326 * v[14] + 1967 * v[13] + 3001 * v[12] + 81 * v[11] + 2439 * v[17] == 1109296&#39;, &#39;2585 * v[16] + 4027 * v[15] + 141 * v[14] + 2539 * v[13] + 3073 * v[12] + 164 * v[11] + 1556 * v[17] == 1368547&#39;, &#39;2080 * v[16] + 358 * v[15] + 1317 * v[14] + 1341 * v[13] + 3681 * v[12] + 2197 * v[11] + 1205 * v[17] == 1320274&#39;, &#39;840 * v[16] + 1494 * v[15] + 2353 * v[14] + 235 * v[13] + 3843 * v[12] + 1496 * v[11] + 1302 * v[17] == 1206735&#39;, &#39;101 * v[16] + 2025 * v[15] + 2842 * v[14] + 1559 * v[13] + 2143 * v[12] + 3008 * v[11] + 981 * v[17] == 1306983&#39;, &#39;1290 * v[16] + 3822 * v[15] + 1733 * v[14] + 292 * v[13] + 816 * v[12] + 1017 * v[11] + 3199 * v[17] == 1160573&#39;, &#39;186 * v[16] + 2712 * v[15] + 2136 * v[14] + 98 * v[11] + 138 * v[12] + 3584 * v[13] + 1173 * v[17] == 1005746&#39;]</span></span>\n<span class="line"><span>    # 创建未知数变量</span></span>\n<span class="line"><span>    v = [Int(f&#39;v{i}&#39;) for i in range(0, len(fc))]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    solver_eng(fc)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-base系列解密" tabindex="-1"><a class="header-anchor" href="#三-base系列解密"><span>三，base系列解密</span></a></h2><h3 id="一-base64换表解密" tabindex="-1"><a class="header-anchor" href="#一-base64换表解密"><span>（一）base64换表解密</span></a></h3><p>原文链接-&gt;<a href="https://blog.csdn.net/liKeQing1027520/article/details/137441614" target="_blank" rel="noopener noreferrer">CTF-reverse-simpleRE（base64变表逆向）-CSDN博客</a></p><blockquote></blockquote><p>你需要： ①在题目中找到换掉的base64表，赋值给s2 ②将密文赋值给en_text ③运行后即可获得明文</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import base64 #导入base64模块用于解密</span></span>\n<span class="line"><span>s1 = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39; #标准表</span></span>\n<span class="line"><span>s2 = &#39;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&#39; #base64换表</span></span>\n<span class="line"><span>en_text = &#39;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#39; #密文</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>map = str.maketrans(s2, s1) #用str类中的maketrans建立映射，注意第一个参数是需要映射的字符串，第二个参数是映射的目标</span></span>\n<span class="line"><span>map_text = en_text.translate(map) #映射实现替换密文，替换前是base64换表加密，替换后则是base64标准表加密</span></span>\n<span class="line"><span>print(map_text) #可以先看看标准表加密的原base64密文</span></span>\n<span class="line"><span>print(base64.b64decode(map_text)) #直接使用提供的base64解密函数解密</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-base58换表解密" tabindex="-1"><a class="header-anchor" href="#二-base58换表解密"><span>（二）base58换表解密</span></a></h3><blockquote></blockquote><p>和上面那个基本没啥区别说实话……会用上面那个这个你一定会用</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import base58  # 导入base58模块用于解密</span></span>\n<span class="line"><span>s1 = &#39;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#39;  # 标准表</span></span>\n<span class="line"><span>s2 = &#39;ABCDEFGHJKLMNPQRSTUVWXYZ123456789abcdefghijkmnopqrstuvwxyz&#39;  # base58换表</span></span>\n<span class="line"><span>en_text = &#39;BQ3SDnTj7vaKkMvur&#39;  # 密文</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span># 用str类中的maketrans建立映射，注意第一个参数是需要映射的字符串，第二个参数是映射的目标</span></span>\n<span class="line"><span>map = str.maketrans(s2, s1)</span></span>\n<span class="line"><span>map_text = en_text.translate(map)  # 映射实现替换密文，替换前是base58换表加密，替换后则是base58标准表加密</span></span>\n<span class="line"><span>print(map_text)  # 可以先看看标准表加密的原base58密文</span></span>\n<span class="line"><span>print(base58.b58decode(map_text).decode())  # 直接使用提供的base58解密函数解密</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-应对base64魔改加密的原始脚本" tabindex="-1"><a class="header-anchor" href="#三-应对base64魔改加密的原始脚本"><span>（三）应对base64魔改加密的原始脚本</span></a></h3><p>原文链接-&gt;<a href="https://blog.csdn.net/liKeQing1027520/article/details/142416583?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">最简单的编码（Ezbase.zip，base64魔改）-CSDN博客</a></p><blockquote></blockquote><p>有些题目会在base64关键加密（即索引查表替换）处进行魔改，此时直接用在线解密网站和python库无法完成解密，需要用相对原始脚本来进行解密，具体看上面链接指向的文章，有例题解释</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>table = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;  # base64变表</span></span>\n<span class="line"><span>cipher = &quot;YWJjZGVmZw==&quot;  # 密文</span></span>\n<span class="line"><span>cipher = cipher.rstrip(&#39;=&#39;) #去除密文多余的&#39;=&#39;</span></span>\n<span class="line"><span>_index = []</span></span>\n<span class="line"><span>key = [1, 2, 3, 4]</span></span>\n<span class="line"><span>for i in range(len(cipher)):</span></span>\n<span class="line"><span>    tmp = table.index(cipher[i])</span></span>\n<span class="line"><span>    _index.append(tmp)</span></span>\n<span class="line"><span>print(_index)</span></span>\n<span class="line"><span>for i in range(0, len(_index), 4):</span></span>\n<span class="line"><span>    a = _index[i]</span></span>\n<span class="line"><span>    b = _index[i + 1]</span></span>\n<span class="line"><span>    c = _index[i + 2] if i + 2 &lt; len(_index) else 0  # 添加范围检查，为未处理部分设为0</span></span>\n<span class="line"><span>    d = _index[i + 3] if i + 3 &lt; len(_index) else 0</span></span>\n<span class="line"><span>    sum = a &lt; 18 | b &lt; 12 | c &lt; 6 | d</span></span>\n<span class="line"><span>    for j in range(3):</span></span>\n<span class="line"><span>        if i * 6 + j * 8 &lt; len(cipher) * 8:  # 检查是否超出原始编码长度</span></span>\n<span class="line"><span>            print(chr((sum &gt;&gt; ((2 - j) * 8)) &amp;amp; 0xff), end=&quot;&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-二维四向迷宫路径求解" tabindex="-1"><a class="header-anchor" href="#四-二维四向迷宫路径求解"><span>四，二维四向迷宫路径求解</span></a></h2><blockquote></blockquote><p>（注：请查看原文学习使用两个脚本！这个脚本的使用相对复杂，但好用！！）</p><p>原文链接-&gt;<a href="https://blog.csdn.net/liKeQing1027520/article/details/138583198?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">CTF-reverse二维四向迷宫路径求解-CSDN博客</a></p><blockquote><h3>（一）脚本一：处理迷宫为二维列表</h3><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str为ida中使用快捷键</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">shift</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">提取到的数据</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 如果提取的是string literal则加上引号视作字符串，如果是C array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">decimal</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">则加上中括号视作列表</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">字符串</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">一维列表</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #s用作索引访问str, 供下面tmp列表取值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#分析题目后设置迷宫的行列</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">row </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #设置二维迷宫行数</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">col </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #设置二维迷宫列数</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">row</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    tmp </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">col</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        tmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">tmp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #凑一行添加一行到迷宫中</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div> <h3>（二）脚本二：获得迷宫路径</h3><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> collections </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> deque</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#设置二维四向迷宫, 如果题目是多个小迷宫问题, 拆分多次调用脚本获取路径即可</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 二维列表迷宫</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path_len </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7fffffff</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#如果题目未给出终点坐标，则一定会指定路径的长度，在此处修改路径长度，否则请保留path_len的极大值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#进行BFS寻找路径</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bfs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> barrier</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    directions </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 定义四个方向的移动</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#获取起点和终点在列表中的索引</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])):</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                start </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                end </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">\t#以下均是bfs算法套路</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\tqueue </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> deque</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\tqueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]))</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # (当前位置, 路径)</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\tvisited </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\tvisited</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">popleft</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> position </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        elif</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path_len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> d </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> directions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          next_position </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          if</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> and</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> and</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \\</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">             maze</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> barrier </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">and</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> next_position </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">not</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> in</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> visited</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]))</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">              visited</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">next_position</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> None</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#执行BFS搜索并打印结果</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __name__</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">__main__</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #maze[起点x坐标][起点y坐标] = &#39;S&#39; #如果题目给了起点终点的坐标，在这里直接给起点和终点添加特征</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #maze[终点x坐标][终点y坐标] = &#39;E&#39;</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> bfs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">S</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">E</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #bfs函数传入参数代表起点、终点、障碍的特征(若题目给出的数据无特征, 手动添加特征即可, 通常障碍是1也有可能是0或其它字符如&#39;#&#39;)</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">移动路径坐标：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">移动路径方位：{</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> range</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)):</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        x1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#上</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">w</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        elif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#下</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        elif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#左</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        elif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#右</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="五-凯撒密码移位解密" tabindex="-1"><a class="header-anchor" href="#五-凯撒密码移位解密"><span>五，凯撒密码移位解密</span></a></h2><p>自己写了个脚本方便快速解决各类凯撒密码rot移位，可以设置大写、小写字母和字符数字是否发生位移</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>def caesarDecode(en_text, rot, rot_upper, rot_lower, rot_diggit):</span></span>\n<span class="line"><span>    tmp=&#39;&#39;</span></span>\n<span class="line"><span>    for i in en_text:</span></span>\n<span class="line"><span>        if(i.isupper() and rot_upper): #i是大写字母而且设置了要移大写字母</span></span>\n<span class="line"><span>            tmp += chr((ord(i) - 65 - rot) % 26 + 65)</span></span>\n<span class="line"><span>        elif(i.islower() and rot_lower):</span></span>\n<span class="line"><span>            tmp += chr((ord(i) - 97 - rot) % 26 + 97)</span></span>\n<span class="line"><span>        elif(i.isdigit() and rot_diggit):</span></span>\n<span class="line"><span>            tmp += chr((ord(i) - 48 - rot) % 26 + 48)</span></span>\n<span class="line"><span>        else:</span></span>\n<span class="line"><span>            tmp += i</span></span>\n<span class="line"><span>    return tmp</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if __name__==&#39;__main__&#39;:</span></span>\n<span class="line"><span>    en_text = &quot;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG&quot; #设置密文</span></span>\n<span class="line"><span>    rot = 3 #设置位移数, 如果是左移设置成负数即可</span></span>\n<span class="line"><span>    rot_upper = True #移大写字母</span></span>\n<span class="line"><span>    rot_lower = True #移小写字母</span></span>\n<span class="line"><span>    rot_diggit = True #移数字字符</span></span>\n<span class="line"><span>    #一般只会移这三类，如果题目特殊，可以自行添加，在caesarDecode()函数中添加对应的分支判断即可</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    en_text = caesarDecode(en_text, rot, rot_upper, rot_lower, rot_diggit)</span></span>\n<span class="line"><span>    print(en_text)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-对字符串进行md5加密" tabindex="-1"><a class="header-anchor" href="#六-对字符串进行md5加密"><span>六，对字符串进行md5加密</span></a></h2><p>题目经常会让对最终输出字符串进行md5加密得到的结果才是flag，使用此脚本即可对字符串进行md5加密</p><blockquote></blockquote><p>①直接将要加密的内容赋值给flag变量 ②如果要加密成大写字母形式，使用upper()函数</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import hashlib</span></span>\n<span class="line"><span>flag = &#39;ddsssddddsssdssdddddsssddddsssaassssdddsddssddwddssssssdddssssdddss&#39;</span></span>\n<span class="line"><span>md5 = hashlib.md5() ## 创建md5对象</span></span>\n<span class="line"><span>md5.update(flag.encode()) #更新md5对象的信息，必须传入bytes类型的数据(b&#39;xxx&#39;格式)</span></span>\n<span class="line"><span>print(md5.hexdigest()) #获取加密后的内容</span></span>\n<span class="line"><span>print(md5.hexdigest().upper()) #如果要大写形式，加上upper()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-字符串与十六进制" tabindex="-1"><a class="header-anchor" href="#七-字符串与十六进制"><span>七，字符串与十六进制</span></a></h2><p>字符串和十六进制常常需要互相变换来使用</p><blockquote></blockquote><p>上面两行：将字符串中的单个字符每两位视作十六进制的ASCII码，将其转为字符 下面两行：将字符串中的单个字符转为对应的十六进制ASCII码，并以字符串形式保存</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#16进制转字符串</span></span>\n<span class="line"><span>hex_data = &#39;68656c6c6f2c206b6571696e6721&#39;</span></span>\n<span class="line"><span>print(bytes.fromhex(hex_data).decode())</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>#字符串转16进制</span></span>\n<span class="line"><span>str = &#39;hello, keqing!&#39;</span></span>\n<span class="line"><span>print(str.encode().hex())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>补充：上面的互转指的是将字符串中的字符统一转换成对于的ASCII码的十六进制形式，例如&#39;A&#39;转为&#39;0x41&#39;（即&#39;65&#39;），&#39;ABC&#39;转为&#39;0x414243&#39;（即65、66、67）以此类推，反之同理</p><p>如果需要做类似**&#39;0x10&#39;(字符串)-&gt;0x10(整数)**这样去掉引号并且改变数据类型的转换，应该使用如下脚本：</p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#字符串转16进制</span></span>\n<span class="line"><span>str = &#39;0x10&#39;</span></span>\n<span class="line"><span>res1 = int(str, 16)</span></span>\n<span class="line"><span>print(res1, type(res1)) #16 &lt;class &#39;int&#39;&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>#16进制转字符串</span></span>\n<span class="line"><span>hex_data = 0x10</span></span>\n<span class="line"><span>res2 = hex(hex_data)</span></span>\n<span class="line"><span>print(res2, type(res2)) #0x10 &lt;class &#39;str&#39;&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八-rc4加解密脚本" tabindex="-1"><a class="header-anchor" href="#八-rc4加解密脚本"><span>八，rc4加解密脚本</span></a></h2><p>rc4算法是对称的，意味着加密和解密用同一个函数，对数据调用一次rc4为加密，再调用一次就解密了</p><blockquote><p>你需要： ①将密文处理成列表形式，赋值给data变量 ②将密钥处理成字符串形式，赋值给key变量 ③运行后获得明文 （补充）2024/9/12刷到一题魔改rc4，它修改了加密轮数为128轮，故解密时所有相关轮数也需要修改成128轮；更主要的是它在初始化s盒时，做了很细微的修改，导致我一直没出flag但又没找到问题所在，故记录于此</p><p><img src="'+e+'" alt=""></p></blockquote><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>def rc4_init(s_box, key, key_len):  # rc4初始化函数，产生s_box</span></span>\n<span class="line"><span>    k = [0] * 256</span></span>\n<span class="line"><span>    i = j = 0</span></span>\n<span class="line"><span>    for i in range(256):</span></span>\n<span class="line"><span>        s_box[i] = i</span></span>\n<span class="line"><span>        k[i] = key[i % key_len]</span></span>\n<span class="line"><span>    for i in range(256):</span></span>\n<span class="line"><span>        j = (j + s_box[i] + ord(k[i])) % 256</span></span>\n<span class="line"><span>        s_box[i], s_box[j] = s_box[j], s_box[i]</span></span>\n<span class="line"><span>def rc4_crypt(s_box, data, data_len, key, key_len):  # rc4算法，由于异或运算的对合性，RC4加密解密使用同一套算法，加解密都是它</span></span>\n<span class="line"><span>    rc4_init(s_box, key, key_len)</span></span>\n<span class="line"><span>    i = j = 0</span></span>\n<span class="line"><span>    for k in range(data_len):</span></span>\n<span class="line"><span>        i = (i + 1) % 256</span></span>\n<span class="line"><span>        j = (j + s_box[i]) % 256</span></span>\n<span class="line"><span>        s_box[i], s_box[j] = s_box[j], s_box[i]</span></span>\n<span class="line"><span>        t = (s_box[i] + s_box[j]) % 256</span></span>\n<span class="line"><span>        data[k] ^= s_box[t]</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>\n<span class="line"><span>    s_box = [0] * 257  # 定义存放s_box数据的列表</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>    # 此处的data即要解密的密文，需要定义成列表形式，其中的元素可以是十六进制或十进制数</span></span>\n<span class="line"><span>    # 如果题目给出的是字符串，需要你自己先把数据处理成列表形式再套用脚本</span></span>\n<span class="line"><span>    data = [235, 13, 97, 41, 191, 155, 5, 34, 243, 50, 40, 151, 227, 134,</span></span>\n<span class="line"><span>            77, 45, 90, 42, 163, 85, 170, 213, 180, 108, 139, 81, 177]  </span></span>\n<span class="line"><span>    #key一定要字符串</span></span>\n<span class="line"><span>    key = &quot;wanyuanshenwande&quot;</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>    rc4_crypt(s_box, data, len(data), key, len(key))</span></span>\n<span class="line"><span>    for i in data:</span></span>\n<span class="line"><span>        print(chr(i), end=&#39;&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九-tea加解密脚本" tabindex="-1"><a class="header-anchor" href="#九-tea加解密脚本"><span>九，tea加解密脚本</span></a></h2><p>原文链接-&gt;<a href="https://blog.csdn.net/liKeQing1027520/article/details/141287289" target="_blank" rel="noopener noreferrer">tea 加密解密算法（面向ctf-reverse使用，光速学会tea逆向套路）-CSDN博客</a></p><blockquote></blockquote><p>你需要： ①根据题目具体的tea魔改，修改对应的delta值、sum初始值、三行经典特征加密代码 ②分析题目，找到密钥（由4个32位无符号整数组成） ③找到密文，密文出现的方式因题目迥异，但可以肯定的是单次调用tea解密时只传入2个32位无符号整数 ④按脚本main函数中的注释提示，处理好密钥和密文，输出部分的固定不动（除非明文要的不是字符，那你具体分析），运行即可获得明文</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#include &lt;stdint.h&gt;</span></span>\n<span class="line"><span>#include &lt;stdio.h&gt;</span></span>\n<span class="line"><span>void tea_enc(uint32_t* v, uint32_t* k) {</span></span>\n<span class="line"><span>    uint32_t v0 = v[0], v1 = v[1];  // v0、v1分别是明文的左、右半部分</span></span>\n<span class="line"><span>    uint32_t sum = 0;               // sum用作加密过程中的一个累加变量</span></span>\n<span class="line"><span>    uint32_t delta = 0xd33b470;     //作为sum每次累加的变化值，题目中往往会修改此值</span></span>\n<span class="line"><span>    for (int i = 0; i &lt; 32; i++) {  // tea加密进行32轮</span></span>\n<span class="line"><span>        //以下3行是核心加密过程，题目中往往会对部分细节做出修改（但由于异或的对称性质，根本不需要记，写解密函数时照抄就行了）</span></span>\n<span class="line"><span>        sum += delta;</span></span>\n<span class="line"><span>        v0 += ((v1 &lt; 4) + k[0]) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k[1]);</span></span>\n<span class="line"><span>        v1 += ((v0 &lt; 4) + k[2]) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k[3]);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // v0和v1只是加密的临时变量，因此加密后的内容要还给v数组</span></span>\n<span class="line"><span>    v[0] = v0;</span></span>\n<span class="line"><span>    v[1] = v1;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>void tea_dec(uint32_t* v, uint32_t* k) {</span></span>\n<span class="line"><span>    uint32_t v0 = v[0], v1 = v[1];  // v0、v1分别是密文的左、右半部分</span></span>\n<span class="line"><span>    uint32_t delta = 0xd33b470;     //作为sum每次累加的变化值，题目中往往会修改此值</span></span>\n<span class="line"><span>    uint32_t sum = 32 * delta;      //此处需要分析32轮加密结束后sum的值与delta的变化, 以此处加密为例子，32轮每次sum+=delta，因此最后sum=32*delta</span></span>\n<span class="line"><span>    for (int i = 0; i &lt; 32; i++) {  // tea加密进行32轮</span></span>\n<span class="line"><span>        //根据加密时的顺序颠倒下面3行的顺序，将加法改为减法（异或部分都是整体，不用管），就是逆向解密过程</span></span>\n<span class="line"><span>        v1 -= ((v0 &lt; 4) + k[2]) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k[3]);</span></span>\n<span class="line"><span>        v0 -= ((v1 &lt; 4) + k[0]) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k[1]);</span></span>\n<span class="line"><span>        sum -= delta;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 因此解密后的内容要还给v数组</span></span>\n<span class="line"><span>    v[0] = v0;</span></span>\n<span class="line"><span>    v[1] = v1;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>int main() {</span></span>\n<span class="line"><span>    // k为加解密密钥，4个32位无符号整数，密钥长度为128位</span></span>\n<span class="line"><span>    uint32_t k[4] = {1, 2, 3, 4};</span></span>\n<span class="line"><span>    // v为要加解密的数据，两个32位无符号整数</span></span>\n<span class="line"><span>    //但是稍微难一点点的都不会直接加密两个uint32_t，除非签到题。像这里的例子就是给了32个uint8_t</span></span>\n<span class="line"><span>    //（常见的题目还有给几个uint32_t的，其实无非是拆开写成0x17、0x65...和连着写成0x1765的区别）</span></span>\n<span class="line"><span>    //在后面的循环里每次传两组，每组4个组成uint32_t用于tea算法</span></span>\n<span class="line"><span>    int8_t input[33] = {0x17, 0x65, 0x54, 0x89, 0xed, 0x65, 0x46, 0x32, 0x3d, 0x58, 0xa9, 0xfd, 0xe2, 0x5e, 0x61, 0x97,</span></span>\n<span class="line"><span>                        0xe4, 0x60, 0xf1, 0x91, 0x73, 0xe9, 0xe9, 0xa2, 0x59, 0xcb, 0x9a, 0x99, 0xec, 0xb1, 0xe1, 0x7d};</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    for (int i = 0; i &lt; 32; i += 8) {</span></span>\n<span class="line"><span>        //每组4个组成uint32_t用于tea算法，tea算法每次加解密操作的v一定是两个uint_32，至于怎么传入两个uint_32，题目有各种呈现方式，需要做题者自行分析</span></span>\n<span class="line"><span>        uint32_t v[2] = {*(uint32_t*)&amp;amp;input[i], *(uint32_t*)&amp;amp;input[i + 4]};</span></span>\n<span class="line"><span>        tea_dec(v, k);</span></span>\n<span class="line"><span>        </span></span>\n<span class="line"><span>        // tea输出字符的固定算法，外层循环两次是因为明文分为左半和右半两个uint32_t</span></span>\n<span class="line"><span>        // 内层循环4次是因为一个字符占1个字节即8位，每次&amp;amp;0xff可以摘下最后1字节打印出对应ASCII字符，然后&gt;&gt;8准备下一字节</span></span>\n<span class="line"><span>        for (int j = 0; j &lt; 2; j++) {</span></span>\n<span class="line"><span>            for (int k = 0; k &lt; 4; k++) {</span></span>\n<span class="line"><span>                printf(&quot;%c&quot;, v[j] &amp;amp; 0xff);</span></span>\n<span class="line"><span>                v[j] &gt;&gt;= 8;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return 0;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十-小端序转大端序" tabindex="-1"><a class="header-anchor" href="#十-小端序转大端序"><span>十，小端序转大端序</span></a></h2><blockquote></blockquote><p>你需要 ①将十六进制小端序数据赋值给变量hex_data ②如果不希望转换后的数据以0x前缀两两分隔，修改little_to_big()函数中formatted_hex变量等号右边的代码 ③运行获得对应的大端序数据</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import struct</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>def little_to_big(hex_value):</span></span>\n<span class="line"><span>    # 打包成小端序然后立刻解包成大端序</span></span>\n<span class="line"><span>    big_endian_bytes = struct.pack(&#39;&lt;Q&#39;, hex_value)</span></span>\n<span class="line"><span>    # 转换为16进制字符串并去除0x和L（长整型标识）</span></span>\n<span class="line"><span>    big_endian_hex = big_endian_bytes.hex()</span></span>\n<span class="line"><span>    # 每两个字符分隔</span></span>\n<span class="line"><span>    splitted_hex = [big_endian_hex[i:i+2]</span></span>\n<span class="line"><span>                    for i in range(0, len(big_endian_hex), 2)]</span></span>\n<span class="line"><span>    # 加入0x前缀并以逗号和空格分隔</span></span>\n<span class="line"><span>    formatted_hex = &#39;, &#39;.join([&#39;0x&#39; + x for x in splitted_hex])</span></span>\n<span class="line"><span>    return formatted_hex</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>\n<span class="line"><span>    hex_data = [</span></span>\n<span class="line"><span>        0x364A65466C271216,</span></span>\n<span class="line"><span>        0x2447243568082139,</span></span>\n<span class="line"><span>        0x29323C0F5A1A7D60,</span></span>\n<span class="line"><span>        0x4D647C3C45531544,</span></span>\n<span class="line"><span>        0x74152339130F7024,</span></span>\n<span class="line"><span>    ]</span></span>\n<span class="line"><span>    for value in hex_data:</span></span>\n<span class="line"><span>        res = little_to_big(value)</span></span>\n<span class="line"><span>        print(res)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一-sm4加解密脚本" tabindex="-1"><a class="header-anchor" href="#十一-sm4加解密脚本"><span>十一，sm4加解密脚本</span></a></h2><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>from gmssl.sm4 import CryptSM4, SM4_ENCRYPT, SM4_DECRYPT</span></span>\n<span class="line"><span>import base64</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class SM4Utils:</span></span>\n<span class="line"><span>    secret_key = b&#39;&#39;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    def __init__(self, secret_key):</span></span>\n<span class="line"><span>        self.secret_key = secret_key</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    # 加密方法</span></span>\n<span class="line"><span>    def encryptData_ECB(self, plain_text):</span></span>\n<span class="line"><span>        # 创建 SM4对象</span></span>\n<span class="line"><span>        crypt_sm4 = CryptSM4()</span></span>\n<span class="line"><span>        # 设置key</span></span>\n<span class="line"><span>        crypt_sm4.set_key(self.secret_key, SM4_ENCRYPT)</span></span>\n<span class="line"><span>        # 调用加密方法加密(十六进制的bytes类型)</span></span>\n<span class="line"><span>        encrypt_value = crypt_sm4.crypt_ecb(plain_text)</span></span>\n<span class="line"><span>        # 用base64.b64encode转码（编码后的bytes）</span></span>\n<span class="line"><span>        cipher_text = base64.b64encode(encrypt_value)</span></span>\n<span class="line"><span>        # 返回加密后的字符串</span></span>\n<span class="line"><span>        return cipher_text.decode(&#39;utf-8&#39;, &#39;ignore&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    def decryptData_ECB(self, cipher_text):</span></span>\n<span class="line"><span>        crypt_sm4 = CryptSM4()</span></span>\n<span class="line"><span>        crypt_sm4.set_key(self.secret_key, SM4_DECRYPT)</span></span>\n<span class="line"><span>        # 将转入参数base64.b64decode解码成十六进制的bytes类型</span></span>\n<span class="line"><span>        byt_cipher_text = base64.b64decode(cipher_text)</span></span>\n<span class="line"><span>        # 调用加密方法解密，解密后为bytes类型</span></span>\n<span class="line"><span>        decrypt_value = crypt_sm4.crypt_ecb(byt_cipher_text)</span></span>\n<span class="line"><span>        return decrypt_value.decode(&#39;utf-8&#39;, &#39;ignore&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    def encryptData_CBC(self, iv, key, plain_text):</span></span>\n<span class="line"><span>        # 创建 SM4对象</span></span>\n<span class="line"><span>        crypt_sm4 = CryptSM4()</span></span>\n<span class="line"><span>        # 设置key</span></span>\n<span class="line"><span>        crypt_sm4.set_key(key, SM4_ENCRYPT)</span></span>\n<span class="line"><span>        # 调用加密方法加密(十六进制的bytes类型)</span></span>\n<span class="line"><span>        encrypt_value = crypt_sm4.crypt_cbc(iv, plain_text)</span></span>\n<span class="line"><span>        # 用base64.b64encode转码（编码后的bytes）</span></span>\n<span class="line"><span>        cipher_text = base64.b64encode(encrypt_value)</span></span>\n<span class="line"><span>        # 返回加密后的字符串</span></span>\n<span class="line"><span>        return cipher_text.decode(&#39;utf-8&#39;, &#39;ignore&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    def decryptData_CBC(self, iv, key, cipher_text):</span></span>\n<span class="line"><span>        crypt_sm4 = CryptSM4()</span></span>\n<span class="line"><span>        # secret_key = b&quot;K0qBoObS8kmfjemG&quot;</span></span>\n<span class="line"><span>        crypt_sm4.set_key(self.secret_key, SM4_DECRYPT)</span></span>\n<span class="line"><span>        # 将转入参数base64.b64decode解码成十六进制的bytes类型</span></span>\n<span class="line"><span>        byt_cipher_text = base64.b64decode(cipher_text)</span></span>\n<span class="line"><span>        # 调用加密方法解密，解密后为bytes类型</span></span>\n<span class="line"><span>        decrypt_value = crypt_sm4.crypt_cbc(iv, byt_cipher_text)</span></span>\n<span class="line"><span>        return decrypt_value.decode(&#39;utf-8&#39;, &#39;ignore&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>\n<span class="line"><span>    key = b&#39;JeF8U9wHFOMfs2Y8&#39;</span></span>\n<span class="line"><span>    SM4_Utils = SM4Utils(key)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    plain_text = b&#39;kYEI25N30vqgSURbd5vEmz/yHt1SMH5YtoRKdXvuPtHrbuuaeOYgeyb1p0fgaq4D&#39;</span></span>\n<span class="line"><span>    iv = b&#39;UISwD9fW6cFh9SNS&#39; #在cbc模式下才需要设置初始化向量iv，ecb模式没有这个值，分析题目用的是什么模式再决定要调用的解密方法</span></span>\n<span class="line"><span>    print(SM4_Utils.decryptData_CBC(iv, key, plain_text))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="持续更新" tabindex="-1"><a class="header-anchor" href="#持续更新"><span>持续更新……</span></a></h2>',62)]))}]]),t=JSON.parse('{"path":"/article/i13vy4rf/","title":"CTF-reverse逆向分析解题常用脚本汇总","lang":"zh-CN","frontmatter":{"title":"CTF-reverse逆向分析解题常用脚本汇总","createTime":"2024/10/11 22:00:00","tags":["学习","CTF","逆向"],"permalink":"/article/i13vy4rf/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem(\'vuepress-theme-appearance\') || \'auto\';const sm = window.matchMedia && window.matchMedia(\'(prefers-color-scheme: dark)\').matches;const isDark = um === \'dark\' || (um !== \'light\' && sm);document.documentElement.dataset.theme = isDark ? \'dark\' : \'light\';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle(\'mac\', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"一，AES解密","slug":"一-aes解密","link":"#一-aes解密","children":[]},{"level":2,"title":"二，z3求解器（求解约束方程未知数）","slug":"二-z3求解器-求解约束方程未知数","link":"#二-z3求解器-求解约束方程未知数","children":[]},{"level":2,"title":"三，base系列解密","slug":"三-base系列解密","link":"#三-base系列解密","children":[{"level":3,"title":"（一）base64换表解密","slug":"一-base64换表解密","link":"#一-base64换表解密","children":[]},{"level":3,"title":"（二）base58换表解密","slug":"二-base58换表解密","link":"#二-base58换表解密","children":[]},{"level":3,"title":"（三）应对base64魔改加密的原始脚本","slug":"三-应对base64魔改加密的原始脚本","link":"#三-应对base64魔改加密的原始脚本","children":[]}]},{"level":2,"title":"四，二维四向迷宫路径求解","slug":"四-二维四向迷宫路径求解","link":"#四-二维四向迷宫路径求解","children":[]},{"level":2,"title":"五，凯撒密码移位解密","slug":"五-凯撒密码移位解密","link":"#五-凯撒密码移位解密","children":[]},{"level":2,"title":"六，对字符串进行md5加密","slug":"六-对字符串进行md5加密","link":"#六-对字符串进行md5加密","children":[]},{"level":2,"title":"七，字符串与十六进制","slug":"七-字符串与十六进制","link":"#七-字符串与十六进制","children":[]},{"level":2,"title":"八，rc4加解密脚本","slug":"八-rc4加解密脚本","link":"#八-rc4加解密脚本","children":[]},{"level":2,"title":"九，tea加解密脚本","slug":"九-tea加解密脚本","link":"#九-tea加解密脚本","children":[]},{"level":2,"title":"十，小端序转大端序","slug":"十-小端序转大端序","link":"#十-小端序转大端序","children":[]},{"level":2,"title":"十一，sm4加解密脚本","slug":"十一-sm4加解密脚本","link":"#十一-sm4加解密脚本","children":[]},{"level":2,"title":"持续更新……","slug":"持续更新","link":"#持续更新","children":[]}],"readingTime":{"minutes":18.85,"words":5656},"filePathRelative":"2.ctf/CTF-reverse逆向分析解题常用脚本汇总.md","categoryList":[{"id":"fb53bb","sort":2,"name":"ctf"}]}')}}]);